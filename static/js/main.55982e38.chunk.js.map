{"version":3,"sources":["Components/Data.js","Components/Date.js","Components/Cities.js","Components/Location.js","Components/Map1.js","App.js","serviceWorker.js","index.js"],"names":["Data","state","Math","round","this","props","result","temp","pressure","humidity","sea_level","Component","Date","calender","dt_txt","City","className","cities","name","country","Location","locate","lat","lon","Map","submit","e","preventDefault","query","target","elements","value","Axios","get","then","response","setState","data","list","main","city","coord","console","log","catch","error","Rain","onSubmit","type","placeholder","onChange","getvalue","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gQA4BeA,E,2MA1BXC,MAAQ,G,wEAEJ,OACI,6BACI,oCAEG,8BACKC,KAAKC,MAAOC,KAAKC,MAAMC,OAAOC,KAAO,IAD1C,WAKH,0CACG,8BAAOH,KAAKC,MAAMC,OAAOE,SAAzB,SAEH,0CACI,8BAAOJ,KAAKC,MAAMC,OAAOG,SAAzB,MAEJ,0CACI,8BACCL,KAAKC,MAAMC,OAAOI,WAFvB,c,GAlBGC,aCaJC,E,2MAZXX,MAAQ,G,wEAEJ,OACI,6BACE,4BACC,kDAAwBG,KAAKC,MAAMQ,SAASC,OAA5C,W,GANIH,aCcJI,E,2MAbXd,MAAQ,G,wEAEJ,OACI,6BACC,yBAAKe,UAAU,gBACb,4CAAkBZ,KAAKC,MAAMY,OAAOC,KAApC,IACEd,KAAKC,MAAMY,OAAOE,e,GAPhBR,aCeJS,E,2MAdXnB,MAAQ,G,wEAEJ,OACI,6BACI,yCAGA,yCAAeG,KAAKC,MAAMgB,OAAOC,KACjC,0CAAgBlB,KAAKC,MAAMgB,OAAOE,U,GAT3BZ,a,iBCwDRa,E,YAlDX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KAUVoB,OAAS,SAACC,GACNA,EAAEC,iBACF,IACMC,EAAQF,EAAEG,OAAOC,SAASb,OAAOc,MACvCC,IAAMC,IAAN,4DAA+DL,EAA/D,kBAFgB,qCAIfM,MAAK,SAAAC,GACF,EAAKC,SAAS,CAAC9B,OAAO6B,EAASE,KAAKC,KAAK,GAAGC,OAC5C,EAAKH,SAAS,CAACxB,KAAKuB,EAASE,KAAKC,KAAK,KACvC,EAAKF,SAAS,CAAChB,SAASe,EAASE,KAAKG,KAAKC,QAC3C,EAAKL,SAAS,CAACnB,OAAOkB,EAASE,KAAKG,OACpCE,QAAQC,IAAI,EAAK1C,MAAMmB,aAG1BwB,OAAO,SAAAC,GACJH,QAAQC,IAAIE,OAxBhB,EAAK5C,MAAQ,CACTK,OAAQ,GACRW,OAAQ,GACRG,SAAU,GACV0B,KAAM,GACNlC,KAAM,IAPK,E,sEA+Bf,OACI,yBAAKI,UAAU,QACd,yBAAKA,UAAU,aACZ,yBAAKA,UAAU,kBACX,0BAAM+B,SAAU3C,KAAKqB,QACjB,2BAAOuB,KAAK,OAAO9B,KAAK,SAAS+B,YAAY,kBAAkBC,SAAU9C,KAAK+C,WAC9E,4BAAQH,KAAK,UAAb,aAIX,kBAAC,EAAD,CAAM/B,OAASb,KAAKH,MAAMgB,SAC1B,kBAAC,EAAD,CAAMJ,SAAWT,KAAKH,MAAMW,OAC5B,kBAAC,EAAD,CAAMN,OAASF,KAAKH,MAAMK,SAC1B,kBAAC,EAAD,CAAUe,OAASjB,KAAKH,MAAMmB,gB,GA7CzBT,a,MCMHyC,MARf,WACE,OACE,yBAAKpC,UAAU,OACX,kBAAC,EAAD,QCKYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMsB,c","file":"static/js/main.55982e38.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Data extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <h4>\r\n                    Temp: \r\n                   <span>\r\n                       {Math.round( this.props.result.temp / 10)}\r\n                       &#8451;\r\n                    </span>\r\n                </h4>\r\n                <h4> Pressure :\r\n                   <span>{this.props.result.pressure} hpa</span>\r\n                </h4>\r\n                <h4> Humidity :\r\n                    <span>{this.props.result.humidity}%</span>\r\n                </h4>\r\n                <p>Elevetaion : \r\n                    <span>\r\n                    {this.props.result.sea_level} \r\n                </span> AMSL</p>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Data;","import React, { Component } from 'react';\r\nclass Date extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n              <h4>\r\n               <p> Last temp updates: {this.props.calender.dt_txt} </p> \r\n              </h4>  \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Date;","import React, { Component } from 'react';\r\nclass City extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n             <div className=\"city-details\">\r\n               <h3> Weather in  {this.props.cities.name}, \r\n                {this.props.cities.country}</h3> \r\n             </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default City;","import React, { Component } from 'react';\r\nclass Location extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <h3>\r\n                  Locations\r\n                </h3>\r\n                <h4>Latitude :{this.props.locate.lat}</h4>\r\n                <h4> Longitude:{this.props.locate.lon}</h4>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Location;","import React, { Component } from 'react';\r\nimport Data from \"./Data\"\r\nimport Date from \"./Date\"\r\nimport City from \"./Cities\"\r\nimport Location from \"./Location\"\r\nimport Axios from 'axios';\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            result: [],\r\n            cities: [],\r\n            Location: '',\r\n            Rain: '',\r\n            Date: ''\r\n         }\r\n    }\r\n\r\n    submit = (e) =>{\r\n        e.preventDefault();\r\n        const App_Key = \"13a7abd459912fdf8833efc12a3429a0\";\r\n        const query = e.target.elements.cities.value\r\n        Axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=${query}&APPID=${App_Key}`)\r\n\r\n        .then(response =>{\r\n            this.setState({result:response.data.list[0].main})\r\n            this.setState({Date:response.data.list[0]})\r\n            this.setState({Location:response.data.city.coord})\r\n            this.setState({cities:response.data.city})\r\n            console.log(this.state.Location)\r\n        })\r\n\r\n        .catch( error =>{\r\n            console.log(error)\r\n        })\r\n     }\r\n     \r\n    render() { \r\n        return ( \r\n            <div className=\"Main\">\r\n             <div className=\"container\">\r\n                <div className=\"main-container\">\r\n                    <form onSubmit={this.submit}>\r\n                        <input type=\"text\" name=\"cities\" placeholder=\"Enter City Name\" onChange={this.getvalue}/>\r\n                        <button type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>    \r\n             </div>\r\n             <City cities ={this.state.cities}/>\r\n             <Date calender ={this.state.Date}/>\r\n             <Data result ={this.state.result}/>\r\n             <Location locate ={this.state.Location}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Map;","import React from 'react';\nimport Map from \"./Components/Map1\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}